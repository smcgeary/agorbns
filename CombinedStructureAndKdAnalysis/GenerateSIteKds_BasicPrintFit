################################################################################
#GenerateSiteTypeKds.py
################################################################################

# Initial parameters and constants.
# args = commandArgs(trailingOnly=TRUE)
# mirna = args[1]
# # # Region within random sequence from which site types orginiates,
# # # going from position [26 - "start" : 26 + 37 + "stop"]
# start = as.integer(args[2])
# stop = as.integer(args[3])
# # # Region within the miRNA sequence for which the structural accessibility
# # # is being measured. [win_left : win_right], where win_left is the 5' most
# # # position withinthe miRNA, and win_right is the 3' most nucleotide position
# # #  within the miRNA.
# win_left = as.integer(args[4])
# win_right = as.integer(args[5])
experiment <- "equilibrium"
# mirna <- "let-7a"
# experiment <- "equilibrium_nb"

read_len <- 37 + start + stop
# Loads general functions used in AgoRBNS analysis.
source("/lab/bartel1_ata/mcgeary/computation/AgoRBNS/general/general.R")



# Loads the colors associated with each site type, for plotting purposes.
site_cols <- read.table(
  "/lab/bartel1_ata/mcgeary/computation/AgoRBNS/general/site_info.txt",
  row.names=1, header=FALSE, sep="\t", stringsAsFactors=FALSE)[, 1, drop = FALSE]
# Loads the table of Agoâ€“miRNA concentrations, for the purposes of modeling
# them into the structure.
# NOTE These are actually higher than the real concentrations, because before
# I began the structural analysis I had to use 1.5-2X the amount of AGO.
# TODO make a new table of miRNA concentrations or just convert within the
# script.
stockago <- read.table(paste0("/lab/bartel1_ata/mcgeary/computation/AgoRBNS",
                       "/SolveForKds/k_c_stockago.txt"), row.names=1,
                       header=TRUE, sep="\t")
k.c.stockago = stockago[mirna,experiment]
k.c.lib = 100

GetKmerOverlap <- function(seq1, seq2) {
  m <- nchar(seq1)
  n <- nchar(seq2)
  if (n > m) {
    temp <- seq1
    temp_i <- m
    seq1 <- seq2
    m <- n
    seq2 <- temp
    n <- temp_i
  }
  overlaps = c()
  for (i in seq(1, m + n - 1)) {
    m_l <- max(m + 1 - i, 1)
    m_r <- min(m + n - i, m)
    n_l <- max(1, 1 - m + i)
    n_r <- min(i, n)
    if (substr(seq1, m_l, m_r) == substr(seq2, n_l, n_r) &
        m_l != n_l & m_r != n_r) {
      if (m_l == 1) {
        combined_seq <- paste0(substr(seq2, 1, n_r - 1), seq1)
      } else if (m_r == m) {
        combined_seq <- paste0(substr(seq1, 1, m_r - 1), seq2)
      } else {
        combined_seq <- seq1
      }
      if (nchar(combined_seq) <= read_len) {
        overlaps <- c(overlaps, combined_seq)

        }
    }
  }
  return(overlaps)
}



## Functions ###################################################################
## I/O functions

#______________
GetSitesXcounts <- function(experiment,mirna) {
  sites_file_name <- paste0("/lab/solexa_bartel/mcgeary/AgoRBNS/",
                       mirna, "/",experiment,"/full_site_count_tables/all_sites_",
                       start, "-", stop, ".txt")
  print(sites_file_name)
  sitesXcounts <- read.table(sites_file_name)
  return(sitesXcounts)
}



GetEquilParameters <- function(experiment,mirna) {
  file_name <- paste0("/lab/solexa_bartel/mcgeary/AgoRBNS/", mirna,
                   "/equilibrium/kds_with_structure/",
                   start, "-", stop, "_1-15_Basic.txt")
  return(read.table(file_name,header = TRUE))
}


# Modeling Functions
#___________
GetOccupancy <- function(c.freeago, kds) {
  # Generates occupancy matrix for the entire input matrix which has rows
  # that are all possible flnaking nucleotide combinations, and columns that
  # are the probabilities of being unpaired in the window.
  #
  # Args:
  # c.freeago: The concentration of free AGO in the binding reaction
  # kds: a list of all kds corresponding to the individual site types including
  #   a non-specific binding kd.
  # IDs: The matrix which gives the site types in column 1 and the flanking
  #    nucleotide identity in column 2.
  # freq.flankXp: The matrix which splits the input into all site and flanking
  #   identities, as well as along the possible average windows for being
  #   unpaired.
  # p.exponent: The exponent used for the weight of geometric average
  #   probability of being unpaired.
  #
  # Returns:
  # A matrix giving the coresponding occuapncy (between 0 and 1) for each
  #   position in the matrix, where 

  return(c.freeago * (c.freeago + kds)^(-1))
}

#______________
GetFreeResidual <- function(c.freeago, kds, c.tots, c.ago) {
  occs_I <- GetOccupancy(c.freeago, kds)
  residual <- (c.ago - c.freeago - sum(occs_I*c.tots))
  if (is.na(residual)) {
    print(kds)
    print(c.ago)
  }
  return(residual)
}

#_________
GetBoundRNA <- function(kds, c.tots, c.ago) {
  if (c.ago > 0) {
    c.free <- NaN
    try(c.free <- uniroot(GetFreeResidual,
                       c(0, c.ago),
                       kds = kds,
                       c.tots = c.tots,
                       c.ago = c.ago,
                       tol = 0.001*.Machine$double.eps^0.25)$root)
    if (is.na(c.free)) {
      c.free <- optimize(GetFreeResidual,
                       c(0, c.ago),
                       kds = kds,
                       c.tots = c.tots,
                       c.ago = c.ago,
                       tol = 0.001*.Machine$double.eps^0.25)$minimum
    }

    
    c.bound <- GetOccupancy(c.free, kds)*c.tots
    return(c.bound)
    } else {
      return(rep(0,length(c.tots)))
    }
}

# Output Functions:
CheckMaxDifference <- function(out) {
  row.last <- dim(out)[1]
  row.secondtolast <- row.last-1
  diffs <- sapply(1:dim(out)[2],function(x) {
    abs((out[row.last,x]-out[row.secondtolast,x])/out[row.secondtolast,x])
  })
  return(max(diffs))
}





# MAIN #########################################################################
# 1. Get data table:
sitesXcounts <- GetSitesXcounts(experiment,mirna)
colnames(sitesXcounts)[3:dim(sitesXcounts)[2]] <- sapply(
  colnames(sitesXcounts)[3:dim(sitesXcounts)[2]], function(x) {
    return(unlist(strsplit(x, split="A", fixed=TRUE))[2])
  }
)
print(sitesXcounts)
seqs <- sitesXcounts[,1]
sitesXcounts <- sitesXcounts[,-1]
sitesXcounts <- sitesXcounts[rowSums(sitesXcounts)>0,]
sitesXcounts <- sitesXcounts[sitesXcounts[,1]>0,]

cols_new = c("magenta","purple","blue","green","red","orange","yellow","black")
names(cols_new) <- c(4, 5, 6, 7, 8, 9, 10,"None")

cols_final <- cols_new[sapply(rownames(sitesXcounts), function(name) { unlist(strsplit(name, "mer"))[1]})]

data <- sitesXcounts[,1:7]

data_full <- data
# ind_current <- seq(1,10)

# data <- data_full[ind_current,]
# data <- rbind(data,rowSums(data_full[-ind_current,]))
rownames(data)[nrow(data)] <- "None"

num.kds <- dim(data)[1]-1
num.bgs <- dim(data)[2]-2


c.I.tots <- matrix(unlist(rep(data[,1]/sum(data[,1])*k.c.lib,
                  5)), ncol = 5, byrow = FALSE)
# print(c.I.tots)
data <- data[,2:6]
colnames(c.I.tots) <- colnames(data)
# colnames(c.I.tots)[1] <- "0"
# colnames(data)[1] <- "0"
rownames(c.I.tots) <- rownames(data)
# Initialize starting Kds, which are set to 1/the enrichment of each site type
# in the A12.6 experiment.
r_numerator <- data[, 2] / sum(data[, 2])
r_denomenator <- c.I.tots[,1] / sum(c.I.tots[,1])
kds.init <- ((r_numerator / r_denomenator)[1 : num.kds] + 1)^(-1)
params <- GetEquilParameters(experiment, mirna)
pars.init <- params[nrow(params), -ncol(params)]
trial <- pars.init
# trial[trial == Inf] <- 0
# trial[is.na(trial)] <- 0
# trial[trial == -1*Inf] <- 0

tick <- 0
# Define function of just kds and pars.
c.totals <- c.I.tots
c.agos <- sapply(colnames(data), function(x) {
   as.numeric(x) / 100
  })

time_all <- proc.time()

GetModelFrequencies <- function(pars, out_model) {
  # print(pars)

  time_0 <- proc.time()
  # Split up the parameters into the kd and background parameters.
  kds  <- c(Logistic(pars[1 : num.kds], 1), 1)
  # print(kds)
  # coccur <- outer(freqs,freqs,FUN = "*")*double.windows + GetOverlapProbs(co.matrix.new,weights)
  # print(rowSums(coccur))
  bgs  <- 10^pars[(num.kds + 1) : (num.kds + num.bgs)]
  # print(kds)
  names(kds) <- rownames(data)
  time_1 <- proc.time()
  # Solve for the free Ago concentration in each experiment.

  # Initialize a matrix with the same total concentration of each site type
  # for each experiment.
  c.bounds <- as.matrix(
    sapply((10^pars[length(pars)])*c.agos, function(x) {
             return(GetBoundRNA(kds, c.totals[, 1], x))
           }
           ))

  time_2 <- proc.time()

  # Use the free Ago concentrations to get the amount of each complex bound
  # to Ago.

  # Get the amount of background binding by subtracting the bound from the
  # total sites in each experiment, normalizing. Must transpose to multiply
  # each column.
  c.frees <- c.totals - c.bounds
  c.bgs <- t(t(c.frees) * bgs / colSums(c.frees))
  c.all <- c.bounds + c.bgs
  c.final <- data.frame(t(t(c.all) / colSums(c.all)))
  # print(c.final)
  colnames(c.final) <- colnames(data)
  prob_pois <<- sum(sapply(colnames(c.totals), function(col_name) {
    dmultinom(x=data[which(c.final[, col_name] > 0),col_name], prob=c.final[which(c.final[, col_name] > 0),col_name],log = TRUE)
    }))

  return(-1*prob_pois)
}


GetModelFrequecies(trial)
# out <- read.table(file = paste0("/lab/solexa_bartel/mcgeary/AgoRBNS/",
#            mirna, "/",experiment,"/kds_with_structure/", k.c.stockago,
#            "_Namita_all_sites"),stringsAsFactors = FALSE)


# trial <- out[nrow(out),-ncol(out)]

# out <- rbind(c(trial, 100000),c(trial, 100000))
# colnames(out) <- c(rownames(data)[-nrow(data)],
#                    "40", "12.6", "4", "12.6", "0.4","AGO","-logp")

# initial_prob <- GetModelFrequencies(trial, out)
# out <- rbind(c(trial, initial_prob),c(trial, initial_prob))

# print(out)
# colnames(out) <- c(rownames(data)[-nrow(data)],
#                    "40", "12.6", "4", "12.6", "0.4","AGO","-logp")



# Assign output file for the entire sequnce of the optimization and write
# to it.

